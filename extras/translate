#!/usr/bin/env python
import argparse
import logging
import os
import sys

import requests

sys.path.insert(0, os.path.abspath(os.path.join(__file__, os.pardir, os.pardir)))

from cli.cluster import MMTApi, DEFAULT_MMT_API_PORT
from cli.libs import multithread


class CLIArgsException(Exception):
    def __init__(self, error):
        self.message = error


class Executor:
    def __init__(self, api, args):
        self.api = api
        self.processing = args.process
        self.nbest = args.nbest

        self.nbest_out = sys.stdout
        self._nbest_file = None
        if args.nbest_file is not None:
            self.nbest_out = self._nbest_file = open(args.nbest_file, 'wb')

        context = None

        if args.context is not None:
            context = api.get_context_s(args.context)
        elif args.context_file is not None:
            context = api.get_context_f(args.context_file)
        elif args.context_weights is not None:
            context = self.__parse_context_map(args.context_weights)

        if context is not None:
            self.session = api.create_session(context)['id']
        else:
            self.session = None

    @staticmethod
    def __parse_context_map(text):
        context = []

        try:
            for score in text.split(','):
                name, value = score.split(':', 2)
                value = float(value)

                context.append({
                    'id': name,
                    'score': value
                })
        except ValueError:
            raise CLIArgsException('invalid context weights map: ' + text)

        return context

    @staticmethod
    def __context_tostring(context):
        return ', '.join([(score['id'] + ' = ' + ('%.6f' % score['score'])) for score in context])

    def _translate(self, line, _=None):
        return self.api.translate(line, session=self.session, processing=self.processing, nbest=self.nbest)

    def _encode_translation(self, translation):
        return translation['translation'].encode('utf-8')

    def _encode_nbest(self, nbest):
        scores = []

        for name, values in nbest['scores'].iteritems():
            scores.append(name + '= ' + ' '.join([str(f) for f in values]))

        return [
            nbest['translation'],
            ' '.join(scores),
            str(nbest['totalScore'])
        ]

    def execute(self, line):
        pass

    def flush(self):
        pass

    def close(self):
        if self._nbest_file is not None:
            self._nbest_file.close()

        try:
            if self.session is not None:
                self.api.close_session(self.session)
        except:
            # Nothing to do
            pass


class BatchExecutor(Executor):
    def __init__(self, api, args, threads=None):
        Executor.__init__(self, api, args)
        self._pool = multithread.Pool(threads if threads is not None else 100)
        self.jobs = []

    def execute(self, line):
        result = self._pool.apply_async(self._translate, (line, None))
        self.jobs.append(result)

    def flush(self):
        line_id = 0

        for job in self.jobs:
            translation = job.get()

            print self._encode_translation(translation)

            if self.nbest is not None:
                for nbest in translation['nbest']:
                    parts = [str(line_id)] + self._encode_nbest(nbest)
                    self.nbest_out.write((u' ||| '.join(parts)).encode('utf-8'))
                    self.nbest_out.write('\n')

            line_id += 1

    def close(self):
        Executor.close(self)
        self._pool.terminate()


class InteractiveExecutor(Executor):
    def __init__(self, api, args):
        Executor.__init__(self, api, args)

    def execute(self, line):
        try:
            translation = self._translate(line)

            if self.nbest is not None:
                for nbest in translation['nbest']:
                    self.nbest_out.write((u' ||| '.join(self._encode_nbest(nbest))).encode('utf-8'))
                    self.nbest_out.write('\n')

            print self._encode_translation(translation)
        except requests.exceptions.ConnectionError:
            print 'CONNECTION ERROR: unable to connect MMT server, try starting it with "./mmt start"'
        except requests.exceptions.HTTPError as e:
            print 'HTTP ERROR: ' + e.message


def main():
    parser = argparse.ArgumentParser(description='Simple translation script to query MMT.')

    parser.add_argument('--server', '-s', metavar='server(:port)', help="MMT server(:port) to use",
                        default="localhost")
    
    # Context arguments
    parser.add_argument('--context', metavar='CONTEXT', dest='context',
                        help='A string to be used as translation context')
    parser.add_argument('--context-file', metavar='CONTEXT_FILE', dest='context_file',
                        help='A local file to be used as translation context')
    parser.add_argument('--context-weights', metavar='CONTEXT_WEIGHTS', dest='context_weights',
                        help='A domain-to-score map encoded: <document 1>:<score 1>[,<document N>:<score N>]')

    # NBest list arguments
    parser.add_argument('--nbest', metavar='NBEST', dest='nbest', default=None, type=int,
                        help='The number of nbest to print')
    parser.add_argument('--nbest-file', metavar='NBEST_FILE', dest='nbest_file', default=None,
                        help='The destination file for the NBest, default is stdout')

    # Translation alignments arguments
    parser.add_argument('--alignment', action='store_true', dest='alignment', default=False,
                        help='if set, the alignments will be printed')
    parser.add_argument('--alignment-file', metavar='ALIGNMENT_FILE', dest='alignment_file', default=None,
                        help='The destination file for the alignments, default is stdout')

    # Mixed arguments
    # parser.add_argument('-e', '--engine', dest='engine', help='the engine name, \'default\' will be used if absent',
    # default=None)
    parser.add_argument('-p', '--api-port', dest='api_port', metavar='API_PORT',
                        help='the public available REST Api port. (default is {port})'
                        .format(port=DEFAULT_MMT_API_PORT), default=None, type=int)
    parser.add_argument('--no-process', action='store_false', dest='process', default=True,
                        help='if set, the script will skip pre- and post-processing of the text')
    parser.add_argument('--batch', '-b', action='store_true', dest='batch', default=False,
                        help='if set, the script will read the whole stdin before send translations to MMT.'
                             'This can be used to execute translation in parallel for a faster translation. ')

    args = parser.parse_args()

    executor = None

    try:
        # Check context arguments
        if (args.context is not None and (args.context_file is not None or args.context_weights is not None)) or \
                (args.context_file is not None and (args.context is not None or args.context_weights is not None)) or \
                (args.context_weights is not None and (args.context_file is not None or args.context is not None)):
            raise CLIArgsException('you can specify only one context option')

        if args.alignment:
            raise CLIArgsException('alignment is not yet supported')

        # Create Api
        api = MMTApi(host=args.server, port=args.api_port)
        executor = BatchExecutor(api, args) if args.batch else InteractiveExecutor(api, args)

        while 1:
            line = sys.stdin.readline()
            if not line:
                break

            executor.execute(line.strip())
        executor.flush()

    except KeyboardInterrupt:
        # exit
        pass
    except CLIArgsException as e:
        msg = 'translate: error: {message}\n'.format(prog=parser.prog, message=e.message)
        parser.print_usage(file=sys.stderr)
        sys.stderr.write(msg)

        return 1
    finally:
        if executor is not None:
            executor.close()

    return 0


if __name__ == '__main__':
    logging.basicConfig(
        format='%(asctime)-15s [%(levelname)s] - %(message)s',
        level=logging.INFO,
        stream=sys.stderr
    )

    exitcode = main()
    exit(exitcode)
